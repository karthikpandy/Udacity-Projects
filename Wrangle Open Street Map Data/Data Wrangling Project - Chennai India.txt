OpenStreetMap Sample Project
Data Wrangling with MongoDB
Karthik Pandy


Map Area: Chennai, Tamilnadu, India


1. Problems Encountered in the Map

After initially downloading a small sample size of the Chennai area and running it against a provisional Clean Data.py file, 
I noticed three main problems with the data, which I will discuss in the following order:

Over abbreviated street names (“Kasturibai Nagar 1st Main Rd”)
Inconsistent postal codes with spaces (“603 202”)
Inconsistent City Names ("chennai-17")

Over abbreviated Street Names:

Based on the sample data, the street names has different abbreviations, to make it uniform i modifed it to a standard form using the below function

mapping_key = ["st", "st.", "ave", "rd.", "rd", "extn", "extn.","St", "St.", "Ave", "Rd.", "Rd", "Extn", "Extn.",
				"ST", "ST.", "AVE", "RD.", "RD", "EXTN", "EXTN."]
mapping = { "st": "Street",
            "st.": "Street",
            "ave" : "Avenue",
            "rd." : "Road",
            "rd" : "Road",
            "extn" : "Extension",
            "extn." : "Extension",
           "St": "Street",
            "St.": "Street",
            "Ave" : "Avenue",
            "Rd." : "Road",
            "Rd" : "Road",
            "Extn" : "Extension",
            "Extn." : "Extension",
           "ST": "Street",
            "ST.": "Street",
            "AVE" : "Avenue",
            "RD." : "Road",
            "RD" : "Road",
            "EXTN" : "Extension",
            "EXTN." : "Extension"
            }
			
def update_street(v_attrib):
    #Split Street into separate words
	sp = v_attrib.split()
	#if the last word is in pir Mapping liist then update that in our Address
    if sp[len(sp)-1] in mapping_key:
        street_update = re.sub(sp[len(sp)-1], mapping[sp[len(sp)-1]], v_attrib).title()
      else:
        street_update = v_attrib.title() 
    return street_update

Sample data before and after change: 
	
	Old Street	New Street
95	Kasturibai Nagar 1st Main Rd	Kasturibai Nagar 1St Main Road
41	Arya Gowda Rd	Arya Gowda Road
107	Jayaram St	Jayaram Street
136	Kalakshethra Rd	Kalakshethra Road
56	Gulmohar Avenue, velachery main road	Gulmohar Avenue, Velachery Main Road
101	6th Main Road Ram Nagar (N) Extn	6Th Main Road Ram Nagar (N) Extension	
	
And City Names are onconsistent with with post codes or state names in it. Using the below function it is fixed to consistent format	
	
def update_city(v_attrib):
    # If name has no comma and chennai in it then update it to chennai
	if not ',' in v_attrib and 'chennai' in v_attrib.lower():
        city_update = 'Chennai'
    # Below line is to remove the state and post code next to city name
    elif 'chennai,' in v_attrib.lower():
        city_update = 'Chennai'
    else:
        city_update = v_attrib.title()
    
    return city_update

Sample data before and after change: 
	
	Old City	New City
16	Chennai City Corporation Limits	Chennai
28	chennai-17	Chennai
30	Chennai City Corporation Limits	Chennai
31	saidapet	Saidapet
44	guduvanchery	Guduvanchery
50	chennai	Chennai
73	Chennai, Tamil Nadu 600056	Chennai

And some of the postcodes are having spaces in between, so i removed the space to make it consistent.	

def update_postcode(v_attrib):
    postcode_update = v_attrib.replace(" ", "") 
    return postcode_update	
	
Sample data before and after change: 

	Old Postcode	New Postcode
25	600 028	600028
68	603 202	603202
83	600 017	600017
84	600 017	600017

 	

Clean Data.py attached.
                                                
MongoDB Analysis

# Sort postcodes by count, descending
                                                
count = db.chennai_india.aggregate([{"$match":{"address.postcode":{"$exists":1}}},
                   {"$group":{"_id":"$address.postcode", 
                               "count":{"$sum":1}}}, {"$sort":{"count":-1}}, {"$limit" : 10}])                                    
for i in count:
    print i

{u'count': 97, u'_id': u'600015'}
{u'count': 67, u'_id': u'600017'}
{u'count': 33, u'_id': u'600042'}
{u'count': 27, u'_id': u'600041'}
{u'count': 22, u'_id': u'600061'}
{u'count': 21, u'_id': u'600008'}
{u'count': 20, u'_id': u'600033'}
{u'count': 19, u'_id': u'600020'}
{u'count': 18, u'_id': u'600107'}
{u'count': 18, u'_id': u'600032'}

# Sort cities by count, descending
                                                
city_count = db.chennai_india.aggregate([{"$match":{"address.city":{"$exists":1}}}, 
                                         {"$group":{"_id":"$address.city", "count":{"$sum":1}}}, 
                                         {"$sort":{"count":-1}}, {"$limit" : 10}])
                                                
for i in city_count:
    print i

{u'count': 528, u'_id': u'Chennai'}
{u'count': 57, u'_id': u'Saidapet'}
{u'count': 14, u'_id': u'Thiruvallur'}
{u'count': 13, u'_id': u'Kanchipuram'}
{u'count': 10, u'_id': u'T.Nagar,Chennai'}
{u'count': 8, u'_id': u'West Mambalam'}
{u'count': 8, u'_id': u'Kalavakkam'}
{u'count': 6, u'_id': u'Kolapakkam'}
{u'count': 6, u'_id': u'Tiruvallur'}
{u'count': 5, u'_id': u'T.Nagar'}

When reviewing this data i noticed there are some issues with this column. And it is mainly because of the free form input for the City. When you see values like T.Nagar
and T.Nagar,Chennai or Kanchipuram and Kanchepuramn etc., So this can be reduced by providing suggestions below when you start typing the letters or pick from a
list. Also in countries like India we have lengthy addresses, so it will be helpful if we have Area or Street 2 (Optional) fields so the city Field will be lot cleaner.

Solution: providing suggestions below when you start typing the letters or pick from a
list

Benefits: 

We wont get more issues with spelling, while different users enter different values.

Anticipated Issues:

As there will be so many cities across the world, storing them and showing them based on letters will take time and also techniically little bit complex



2. Data Overview
                                                
This section contains basic statistics about the dataset and the MongoDB queries used to gather them.
                                                
File sizes
                                                
chennai_india.osm ......... 400 MB
chennai_india.osm.json .... 470 MB

# Number of documents
                                                
db.chennai_india.find().count() 

2246961

# Number of nodes
                                                
db.chennai_india.find({"type":"node"}).count()

1835597

# Number of ways
                                                
db.chennai_india.find({"type":"way"}).count()

411364

# Number of documents with tags or address
                                                
db.chennai_india.find({"address": {"$exists": "true"}}).count()

1418

looks like there are very low user inputs for this city or region for locations (points) when compared to the total nodes.so some kind of reward point schemes or
incentives can motivate the users to give more input about the locations. Now a days maps are used mainly for finding attractions, amenities navigations etc,

Solution: Give rewards or points who can update about amenities or addresses in their areas.

Benefits: 

It will increase the uasbility of the maps compared to others

Issues:

Based on the rewards wew may get more inputs but validating whether those arecorrect and consistent will be hard.

# Number of unique users
                                                
len(db.chennai_india.distinct('created.user'))

1181

# Top 1 contributing user
                                                
top1 = db.chennai_india.aggregate([{"$group":{"_id":"$created.user", "count":{"$sum":1}}}, {"$sort":{"count":-1}}, {"$limit":1}])
               
                                                
for i in top1:
    print i

{u'count': 164945, u'_id': u'maheshrkm'}

# Number of users appearing only once (having 1 post)
                                                
db.chennai_india.aggregate([{"$group":{"_id":"$created.user", "count":{"$sum":1}}}, {"$group":{"_id":"$count", "num_users":{"$sum":1}}}, {"$sort":{"_id":1}}, {"$limit":1}])
[ {"_id":1,"num_users":56} ]
# “_id” represents postcount

[{'_id': 1, 'num_users': 56}]

3. Additional Ideas

# Top 10 appearing amenities
                                                
amenities = db.chennai_india.aggregate([{"$match":{"amenity":{"$exists":1}}}, {"$group":{"_id":"$amenity","count":{"$sum":1}}}, {"$sort":{"count":-1}}, {"$limit":10}])
                     
for i in amenities:
    print i

{u'count': 638, u'_id': u'place_of_worship'}
{u'count': 519, u'_id': u'school'}
{u'count': 375, u'_id': u'restaurant'}
{u'count': 222, u'_id': u'hospital'}
{u'count': 192, u'_id': u'atm'}
{u'count': 186, u'_id': u'bank'}
{u'count': 178, u'_id': u'college'}
{u'count': 140, u'_id': u'fuel'}
{u'count': 119, u'_id': u'pharmacy'}
{u'count': 110, u'_id': u'bus_station'}


# Biggest religion (no surprise here)
                                                
religion = db.chennai_india.aggregate([{"$match":{"amenity":{"$exists":1}, "amenity":"place_of_worship"}}, {"$group":{"_id":"$religion", "count":{"$sum":1}}},{"$sort":{"count":-1}}, {"$limit":1}])

for i in religion:
    print i

{u'count': 314, u'_id': u'hindu'}

# Most popular cuisines
                                                
cuisines = db.chennai_india.aggregate([{"$match":{"amenity":{"$exists":1}, "amenity":"restaurant"}}, {"$group":{"_id":"$cuisine", "count":{"$sum":1}}}, {"$sort":{"count":-1}}, {"$limit":5}])
                                                        
for i in cuisines:
    print i

{u'count': 236, u'_id': None}
{u'count': 47, u'_id': u'regional'}	
{u'count': 36, u'_id': u'indian'}
{u'count': 8, u'_id': u'vegetarian'}
{u'count': 7, u'_id': u'chinese'}
                                           
Conclusion                        

After this review of the data  it looks like chennai map data has more nodes and ways. But based on the above queries, there is not much
information about amenitiies or addresses. Also the City Names and Streets can be more structured as there are multiple formats used in India.
As discussed above we can do some steps to make the data cleaner while entering itslef like showing cities or address from letters typed or pick from list etc.
The solutions discussed above has its down sides also like having technical difficulties in adding validations to the form as it will differ a lot from region to region.
And the reward schemes can get us more data but it will be efffective if we have other validations in placce to get good data.





